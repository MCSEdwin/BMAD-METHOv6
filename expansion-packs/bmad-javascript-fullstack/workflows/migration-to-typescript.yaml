# <!-- Powered by BMADâ„¢ Core -->
workflow:
  id: migration-to-typescript
  name: JavaScript to TypeScript Migration
  description: Systematic workflow for migrating existing JavaScript codebases to TypeScript. Incremental approach that maintains functionality while adding type safety.
  type: migration
  project_types:
    - javascript-legacy
    - codebase-modernization
    - technical-debt

  sequence:
    - agent: typescript-expert
      creates: migration-assessment.md
      notes: "Assess codebase: size, complexity, test coverage, dependencies. Estimate effort and create migration phases. SAVE to docs/migration/"

    - agent: typescript-expert
      creates: migration-strategy.md
      requires: migration-assessment.md
      notes: "Define strategy: strict mode timeline, file conversion order, type definition approach, and team training plan. SAVE to docs/migration/"

    - step: phase1_setup
      action: configure_typescript
      notes: Add TypeScript to project. Configure tsconfig.json with `allowJs: true, checkJs: false, strict: false`. Rename no files yet.

    - step: phase2_type_definitions
      action: add_type_files
      notes: Create .d.ts files for core types and interfaces. Add @ts-check comments to critical files to catch obvious errors.

    - agent: typescript-expert
      creates: type-definitions-catalog.md
      notes: Document all major types, interfaces, and where they're used. This guides developers during conversion.

    - step: phase3_incremental_conversion
      action: convert_files_incrementally
      notes: |
        Convert files in this order:
        1. Utility functions (pure functions, no side effects)
        2. Constants and configuration
        3. Type definitions and interfaces
        4. Data models and entities
        5. API clients and services
        6. React components (leaf components first)
        7. Pages and routes
        8. Main application files

    - step: phase4_enable_strict_checking
      action: gradual_strict_mode
      notes: |
        Gradually enable strict checks:
        1. Enable noImplicitAny
        2. Enable strictNullChecks
        3. Enable strictFunctionTypes
        4. Enable all strict flags
        Fix errors in each phase before moving to next.

    - agent: typescript-expert
      validates: migration_completeness
      notes: Verify all files converted, strict mode enabled, no ts-ignore except where documented, and tests passing.

  workflow_end:
    action: migration_complete
    notes: Full TypeScript migration complete. Update team documentation, remove migration tracking, and establish TypeScript as standard.

  conversion_best_practices:
    - Convert small batches (5-10 files at a time)
    - Run tests after each batch
    - Start with any instead of complex types (refine later)
    - Use Type Assertions sparingly, document why needed
    - Prefer interfaces over types for object shapes
    - Create shared types in dedicated files

  common_challenges:
    third_party_types:
      solution: Install @types packages or create custom declarations
    implicit_any:
      solution: Start with explicit any, refine incrementally
    null_undefined_checks:
      solution: Use optional chaining and nullish coalescing
    this_binding:
      solution: Use arrow functions or explicit this typing

  timeline_estimates:
    small_codebase: 2-4 weeks (< 10k lines)
    medium_codebase: 1-3 months (10k-50k lines)
    large_codebase: 3-6 months (> 50k lines)