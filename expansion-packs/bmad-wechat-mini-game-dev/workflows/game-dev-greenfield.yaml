# <!-- Powered by BMADâ„¢ Core -->
workflow:
  id: wechat-game-dev-greenfield
  name: WeChat Game Development - Greenfield Project
  description: Specialized workflow for creating 2D games from concept to implementation for the WeChat Mini-Game platform. Guides teams through game concept development, design documentation, technical architecture, and story-driven development for professional game development.
  type: greenfield
  project_types:
    - indie-game
    - mobile-game
    - web-game
    - educational-game
    - prototype-game
    - game-jam
  full_game_sequence:
    - agent: game-designer
      creates: game-brief.md
      optional_steps:
        - brainstorming_session
        - game_research_prompt
        - player_research
      notes: "Start with brainstorming game concepts, then create comprehensive game brief. SAVE OUTPUT: Copy final game-brief.md to your project's docs/design/ folder."
    - agent: game-designer
      creates: game-design-doc.md
      requires: game-brief.md
      optional_steps:
        - competitive_analysis
        - technical_research
      notes: "Create detailed Game Design Document using game-design-doc-tmpl. Defines all gameplay mechanics, progression, and technical requirements. SAVE OUTPUT: Copy final game-design-doc.md to your project's docs/design/ folder."
    - agent: game-qa
      validates: gdd_testability
      requires: game-design-doc.md
      optional_steps:
        - risk_assessment
      notes: "(Optional but Recommended) The QA agent reviews the GDD for testability, clarity, and potential performance risks."
    - agent: game-orchestrator
      creates: game-architecture.md
      requires: game-design-doc.md
      optional_steps:
        - technical_research_prompt
        - performance_analysis
        - platform_research
      notes: "Create comprehensive technical architecture using game-architecture-tmpl. Defines WeChat Mini-Game systems, performance optimization, and code structure. SAVE OUTPUT: Copy final game-architecture.md to your project's docs/architecture/ folder."
    - agent: game-pm
      creates: project-plan.md
      requires:
        - game-design-doc.md
        - game-architecture.md
      notes: "The PM creates a high-level project plan, including timelines, milestones, and epics, based on the GDD and architecture."
    - agent: game-po
      validates: all_documents
      requires:
        - game-brief.md
        - game-design-doc.md
        - game-architecture.md
        - project-plan.md
      uses: game-design-checklist
      notes: The Product Owner validates all planning documents for consistency, completeness, and alignment with the project's goals.
    - agent: various
      updates: flagged_design_documents
      condition: validation_issues
      notes: If validation finds issues, return to the relevant agent to fix and re-export the updated documents to the docs/ folder.
  project_setup_guidance:
    action: guide_game_project_structure
    notes: Set up the game project structure following the game architecture document. Create pages/, components/, js/, and images/ directories. Initialize WeChat Mini-Game configuration.
  workflow_end:
    action: move_to_story_development
    notes: All planning artifacts are complete. Begin the story-driven development phase. Use the Game Scrum Master to create implementation stories from the design documents.
  prototype_sequence:
    - step: prototype_scope
      action: assess_prototype_complexity
      notes: First, assess if this needs a full game design (use full_game_sequence) or can be a rapid prototype.
    - agent: game-designer
      creates: game-brief.md
      optional_steps:
        - quick_brainstorming
        - concept_validation
      notes: "Create a focused game brief for the prototype. Emphasize core mechanics and immediate playability. SAVE OUTPUT: Copy final game-brief.md to your project's docs/ folder."
    - agent: game-designer
      creates: prototype-design.md
      uses: create-doc prototype-design OR create-game-story
      requires: game-brief.md
      notes: Create a minimal design document or jump directly to implementation stories for rapid prototyping. Choose based on the prototype's complexity.
  prototype_workflow_end:
    action: move_to_rapid_implementation
    notes: The prototype is defined. Begin immediate implementation with the Game Developer. Focus on core mechanics first, then iterate based on playtesting.
  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: WeChat Game Development Project] --> B{Project Scope?}
        B -->|Full Game/Production| C[game-designer: game-brief.md]
        B -->|Prototype/Game Jam| D[game-designer: focused game-brief.md]

        C --> E[game-designer: game-design-doc.md]
        E --> F{QA Review? (Optional)}
        F -->|Yes| G[game-qa: GDD Testability Review]
        F -->|No| H[game-orchestrator: game-architecture.md]
        G --> H
        H --> I[game-pm: project-plan.md]
        I --> J[game-po: Validate All Documents]
        J --> K{Validation Issues?}
        K -->|Yes| L[Return to relevant agent for fixes]
        K -->|No| M[Set up game project structure]
        L --> J
        M --> N[Move to Story Development Phase]

        D --> O[game-designer: prototype-design.md]
        O --> P[Move to Rapid Implementation]

        style N fill:#90EE90
        style P fill:#90EE90
        style C fill:#FFE4B5
        style E fill:#FFE4B5
        style G fill:#FFDAB9
        style H fill:#E6E6FA
        style I fill:#ADD8E6
        style J fill:#FFB6C1
        style D fill:#FFB6C1
        style O fill:#FFB6C1
    ```
  decision_guidance:
    use_full_sequence_when:
      - Building commercial or production games
      - Multiple team members involved
      - Complex gameplay systems (3+ core mechanics)
      - Long-term development timeline (2+ months)
      - Need comprehensive documentation for team coordination
      - Educational or enterprise game projects
    use_prototype_sequence_when:
      - Game jams or time-constrained development
      - Solo developer or very small team
      - Experimental or proof-of-concept games
      - Simple mechanics (1-2 core systems)
      - Quick validation of game concepts
      - Learning projects or technical demos
  handoff_prompts:
    designer_to_gdd: Game brief is complete. Save it as docs/design/game-brief.md in your project, then create the comprehensive Game Design Document.
    gdd_to_level: Game Design Document ready. Save it as docs/design/game-design-doc.md, then create the level design framework.
    level_to_architect: Level design complete. Save it as docs/design/level-design-doc.md, then create the technical architecture.
    architect_review: Architecture complete. Save it as docs/architecture/game-architecture.md. Please validate all design documents for consistency.
    validation_issues: Design validation found issues with [document]. Please return to [agent] to fix and re-save the updated document.
    full_complete: All design artifacts validated and saved. Set up game project structure and move to story development phase.
    prototype_designer_to_dev: Prototype brief complete. Save it as docs/game-brief.md, then create minimal design or jump directly to implementation stories.
    prototype_complete: Prototype defined. Begin rapid implementation focusing on core mechanics and immediate playability.
  story_development_guidance:
    epic_breakdown:
      - Core Game Systems" - Fundamental gameplay mechanics and player controls
      - Level Content" - Individual levels, progression, and content implementation
      - User Interface" - Menus, HUD, settings, and player feedback systems
      - Audio Integration" - Music, sound effects, and audio systems
      - Performance Optimization" - Platform optimization and technical polish
      - Game Polish" - Visual effects, animations, and final user experience
    story_creation_process:
      - Use Game Scrum Master to create detailed implementation stories
      - Each story should reference specific GDD sections
      - Include performance requirements
      - Specify WeChat Mini-Game implementation details
      - Apply game-story-dod-checklist for quality validation
      - Ensure stories are immediately actionable by Game Developer
  game_development_best_practices:
    performance_targets:
      - Maintain smooth performance on target devices throughout development
      - Memory usage under specified limits per game system
      - Loading times under 3 seconds for levels
      - Smooth animation and responsive player controls
    technical_standards:
      - JavaScript/TypeScript best practices
      - Component-based game architecture
      - Comprehensive error handling and graceful degradation
    playtesting_integration:
      - Test core mechanics early and frequently
      - Validate game balance through metrics and player feedback
      - Iterate on design based on implementation discoveries
      - Document design changes and rationale
  success_criteria:
    design_phase_complete:
      - All design documents created and validated
      - Technical architecture aligns with game design requirements
      - Performance targets defined and achievable
      - Story breakdown ready for implementation
      - Project structure established
    implementation_readiness:
      - Development environment configured for WeChat Mini-Game
      - Asset pipeline and build system established
      - Testing framework in place
      - Team roles and responsibilities defined
      - First implementation stories created and ready
